https://leetcode.com/problems/maximum-tastiness-of-candy-basket/description/?envType=problem-list-v2&envId=binary-search
---------------------------------------------------------------------------------------------------->
class Solution {
public:
    bool canPick(const vector<int>& price, int k, int minDiff) {
        int count = 1;  
        int last = price[0];
        for (int i = 1; i < price.size(); ++i) {
            if (price[i] - last >= minDiff) {
                count++;
                last = price[i];
            }
            if (count >= k) return true;
        }
        return false;
    }
    int maximumTastiness(vector<int>& price, int k) {
        sort(price.begin(), price.end());
        int left = 0;
        int right = price.back() - price.front();
        int result = 0;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (canPick(price, k, mid)) {
                result = mid;        
                left = mid + 1;
            } else {
                right = mid - 1;   
            }
        }
        return result;
    }
};